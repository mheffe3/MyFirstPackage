#string
myString <- "hello, world!"
print(myString)

#Vectors
v <- TRUE
print(class(v))
v <- 23.5
print(class(v))
v <- 2L
print(class(v))
v <- 2+5i
print(class(v))
v <- 'a'
print(class(v))
v <- charToRaw("Hello")
print(class(v))

#vector with multiple elements
apple <- c('red', 'green', "yellow")
print(apple)
print(class(apple))

#Lists
#Lists can contain many different types of elements inside them
#such as vectors, functions, and even other lists
list1 <- list(c(2,5,3),21.3,sin)
print(list1)

#Matrices
#Matrices are a two dimensional rectangular data set created with a vector
M = matrix(c('a','a','b','c','b','a'), nrow = 2, ncol = 3, byrow = TRUE)
print(M)

#Arrays
#Arrays can be any number of dimensions
a <- array(c('green','yellow'),dim = c(3,3,2))
print(a)

#Factors
apple_colors <- c('green','green','yellow','red','red','red','green')
factor_apple <- factor(apple_colors)
print(factor_apple)
print(nlevels(factor_apple))

#Data Frames
BMI <- data.frame(
  gender = c("Male", "Male", "Female"),
  height = c(152, 171.5, 165),
  weight = c(81,93,78),
  Age = c(42,38,26)
)
print(BMI)

#Variables
#Variables can start with a letter or a dot not followed by a number
#They can contain letters, numbers, dots, and underscores
var.1 = c(0,1,2,3)
var.2 <- c("learn","R")
c(TRUE,1) -> var.3
print(var.1)
cat ("var.1 is ", var.1 ,"\n")
cat ("var.2 is ", var.2 ,"\n")
cat ("var.3 is ", var.3 ,"\n")

print(ls()) #displays all variables available in the workspace
print(ls(pattern = "var")) #lists variables that have the pattern var
print(ls(all.name = TRUE)) # variables staring with dot(.) are hidden this prints them

rm(var.3) #deletes var.3
#print(var.3)

rm(list = ls()) #deletes all variables
print(ls())



#Operators


#Arithmetic Operators
# + adds two vectors
v <- c( 2,5.5,6)
t <- c(8, 3, 4)
print(v+t)

# - subtracts second vector from the first
v <- c( 2,5.5,6)
t <- c(8, 3, 4)
print(v-t)

# * multiplies tow vectors together
v <- c( 2,5.5,6)
t <- c(8, 3, 4)
print(v*t)

# / divides the first vector by the second
v <- c( 2,5.5,6)
t <- c(8, 3, 4)
print(v/t)

# %% gives the remainder of the first vector with the second
v <- c( 2,5.5,6)
t <- c(8, 3, 4)
print(v%%t)

# %/% integer quotient of division of first vector by the second
v <- c( 2,5.5,6)
t <- c(8, 3, 4)
print(v%/%t)

# ^ the first vector raised to the exponent of the second vector
v <- c( 2,5.5,6)
t <- c(8, 3, 4)
print(v^t)


#Relational Operators
# > checks if each element of the first vector is greater than the corresponding element of the second vector
v <- c(2,5.5,6,9)
t <- c(8,2.5,14,9)
print(v>t)

# < Checks if each element of the first vector is less than the corresponding element of the second vector
v <- c(2,5.5,6,9)
t <- c(8,2.5,14,9)
print(v < t)

# == Checks if each element of the first vector is equal to the corresponding element of the second vector
v <- c(2,5.5,6,9)
t <- c(8,2.5,14,9)
print(v == t)

# <= Checks if each element of the first vector is less than or equal to
#the corresponding element of the second vector.
v <- c(2,5.5,6,9)
t <- c(8,2.5,14,9)
print(v<=t)

# >= Checks if each element of the first vector is greater than or equal to
#the corresponding element of the second vector.
v <- c(2,5.5,6,9)
t <- c(8,2.5,14,9)
print(v>=t)

# != Checks if each element of the first vector is unequal to the corresponding element of the second vector.
v <- c(2,5.5,6,9)
t <- c(8,2.5,14,9)
print(v!=t)


#Logical Operators

# & combines each element of the first vector with the corresponding element of the second vector
#and gives an output TRUE if both elements are TRUE
v <- c(3,1,TRUE,2+3i)
t <- c(4,1,FALSE,2+3i)
print(v&t)

# | combines each element of the first vector with the corresponding element of the second vector
#and gives a output TRUE if one the elements is TRUE
v <- c(3,0,TRUE,2+2i)
t <- c(4,0,FALSE,2+3i)
print(v|t)

# ! Takes each element of the vector and gives the opposite logical value
v <- c(3,0,TRUE,2+2i)
print(!v)

# && Takes first element of both the vectors and gives the TRUE only if both are TRUE.
v <- c(3,0,TRUE,2+2i)
t <- c(1,3,TRUE,2+3i)
print(v&&t)

# || Takes first element of both the vectors and gives the TRUE if one of them is TRUE.
v <- c(0,0,TRUE,2+2i)
t <- c(0,3,TRUE,2+3i)
print(v||t)


#Assignment Operators

# <- = <<- Left assignment
v1 <- c(3,1,TRUE,2+3i)
v2 <<- c(3,1,TRUE,2+3i)
v3 = c(3,1,TRUE,2+3i)
print(v1)
print(v2)
print(v3)

# -> ->> right assignment
c(3,1,TRUE,2+3i) -> v1
c(3,1,TRUE,2+3i) ->> v2
print(v1)
print(v2)

#Miscellaneous Operators

# : creates the series of numbers in sequence for a vector
v <- 2:8
print(v)

# %in% used to identify if an element belongs to a vector
v1 <- 8
v2 <- 12
t <- 1:10
print(v1 %in% t)
print(v2 %in% t)

# %*% used to multiply a matrix with its transpose
M = matrix( c(2,6,5,1,10,4), nrow = 2,ncol = 3,byrow = TRUE)
t = M %*% t(M)
print(t)


#Conditional Statements

# if statement
x <- 30L
if(is.integer(x)) {
  print("X is an Integer")
}

# if...else statement
x <- c("what","is","truth")

if("Truth" %in% x) {
  print("Truth is found")
} else {
  print("Truth is not found")
}

# if...else if...else statement
x <- c("what","is","truth")

if("Truth" %in% x) {
  print("Truth is found the first time")
} else if ("truth" %in% x) {
  print("truth is found the second time")
} else {
  print("No truth found")
}

# switch statements
x <- switch(
  3,
  "first",
  "second",
  "third",
  "fourth"
)
print(x)

#Loops

# repeat loop
v <- c("Hello","loop")
cnt <- 2

repeat {
  print(v)
  cnt <- cnt+1

  if(cnt > 5) {
    break
  }
}

# while loop
v <- c("Hello","while loop")
cnt <- 2

while (cnt < 7) {
  print(v)
  cnt = cnt + 1
}

# for loop
v <- LETTERS[1:4]
for ( i in v) {
  print(i)
}

#Loop control statements

# break statement
v <- c("Hello","loop")
cnt <- 2

repeat {
  print(v)
  cnt <- cnt + 1

  if(cnt > 5) {
    break
  }
}

# next statement
v <- LETTERS[1:6]
for ( i in v) {

  if (i == "D") {
    next
  }
  print(i)
}

#Functions

#Built in Functions
print(seq(32,44))
print(mean(25:82))
print(sum(41:68))

#User-defined Functions

#Function with parameter
new.function <- function(a) {
  for(i in 1:a) {
    b <- i^2
    print(b)
  }
}
new.function(6)

#Function without parameter
new.function <- function() {
  for(i in 1:5) {
    print(i^2)
  }
}
new.function()

#Calling a function with argument values (by position and by name)
new.function <- function(a,b,c) {
  result <- a * b + c
  print(result)
}
new.function(5,3,11) #by position
new.function(a = 11, b = 5, c = 3) #by name

#calling function with default arguments
new.function <- function(a = 3, b = 6) {
  result <- a * b
  print(result)
}
new.function()
new.function(9,5)

#Strings

#Concatenation
a <- "Hello"
b <- 'How'
c <- "are you? "

print(paste(a,b,c))

print(paste(a,b,c, sep = "-"))

print(paste(a,b,c, sep = "", collapse = ""))

#format
# Total number of digits displayed. Last digit rounded off.
result <- format(23.123456789, digits = 9)
print(result)

# Display numbers in scientific notation.
result <- format(c(6, 13.14521), scientific = TRUE)
print(result)

# The minimum number of digits to the right of the decimal point.
result <- format(23.47, nsmall = 5)
print(result)

# Format treats everything as a string.
result <- format(6)
print(result)

# Numbers are padded with blank in the beginning for width.
result <- format(13.7, width = 6)
print(result)

# Left justify strings.
result <- format("Hello", width = 8, justify = "l")
print(result)

# Justify string with center.
result <- format("Hello", width = 8, justify = "c")
print(result)

# nchar(x) counts the number of chars in a string
result <- nchar("Count the number of characters")
print(result)

# changing cases to upper and lower

# Changing to Upper case.
result <- toupper("Changing To Upper")
print(result)

# Changing to lower case.
result <- tolower("Changing To Lower")
print(result)

#Extracting parts of a string with substring(x,first,last)
# Extract characters from 5th to 7th position.
result <- substring("Extract", 5, 7)
print(result)

#Vectors

# Atomic vector of type character.
print("abc");

# Atomic vector of type double.
print(12.5)

# Atomic vector of type integer.
print(63L)

# Atomic vector of type logical.
print(TRUE)

# Atomic vector of type complex.
print(2+3i)

# Atomic vector of type raw.
print(charToRaw('hello'))

# : with numeric data
# Creating a sequence from 5 to 13.
v <- 5:13
print(v)

# Creating a sequence from 6.6 to 12.6.
v <- 6.6:12.6
print(v)

# If the final element specified does not belong to the sequence then it is discarded.
v <- 3.8:11.4
print(v)

#Sequence operator
# Create vector with elements from 5 to 9 incrementing by 0.4.
print(seq(5, 9, by = 0.4))

# c() function
# The logical and numeric values are converted to characters.
s <- c('apple','red',5,TRUE)
print(s)

# Accessing Vector Elements (indexing starts with 1)
# Accessing vector elements using position.
t <- c("Sun","Mon","Tue","Wed","Thurs","Fri","Sat")
u <- t[c(2,3,6)]
print(u)

# Accessing vector elements using logical indexing.
v <- t[c(TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,FALSE)]
print(v)

# Accessing vector elements using negative indexing.
x <- t[c(-2,-5)]
print(x)

# Accessing vector elements using 0/1 indexing.
y <- t[c(0,0,0,0,0,0,1)]
print(y)

#Vector Manipulation
# Create two vectors.
v1 <- c(3,8,4,5,0,11)
v2 <- c(4,11,0,8,1,2)

# Vector addition.
add.result <- v1+v2
print(add.result)

# Vector subtraction.
sub.result <- v1-v2
print(sub.result)

# Vector multiplication.
multi.result <- v1*v2
print(multi.result)

# Vector division.
divi.result <- v1/v2
print(divi.result)

#Vector Element Recycling
v1 <- c(3,8,4,5,0,11)
v2 <- c(4,11)
# V2 becomes c(4,11,4,11,4,11)

add.result <- v1+v2
print(add.result)

sub.result <- v1-v2
print(sub.result)

#Vector Element sorting
v <- c(3,8,4,5,0,11, -9, 304)

# Sort the elements of the vector.
sort.result <- sort(v)
print(sort.result)

# Sort the elements in the reverse order.
revsort.result <- sort(v, decreasing = TRUE)
print(revsort.result)

# Sorting character vectors.
v <- c("Red","Blue","yellow","violet")
sort.result <- sort(v)
print(sort.result)

# Sorting character vectors in reverse order.
revsort.result <- sort(v, decreasing = TRUE)
print(revsort.result)

#Lists
# Create a list containing strings, numbers, vectors and logical
# values.
list_data <- list("Red", "Green", c(21,32,11), TRUE, 51.23, 119.1)
print(list_data)

#Naming List Elements
# Create a list containing a vector, a matrix and a list.
list_data <- list(c("Jan","Feb","Mar"), matrix(c(3,9,5,1,-2,8), nrow = 2),
                  list("green",12.3))

# Give names to the elements in the list.
names(list_data) <- c("1st Quarter", "A_Matrix", "A Inner list")

# Show the list.
print(list_data)

#Accessing Elements in a list
# Create a list containing a vector, a matrix and a list.
list_data <- list(c("Jan","Feb","Mar"), matrix(c(3,9,5,1,-2,8), nrow = 2),
                  list("green",12.3))

# Give names to the elements in the list.
names(list_data) <- c("1st Quarter", "A_Matrix", "A Inner list")

# Access the first element of the list.
print(list_data[1])

# Access the third element. As it is also a list, all its elements will be printed.
print(list_data[3])

# Access the list element using the name of the element.
print(list_data$A_Matrix)


#Manipulating List elements
# Create a list containing a vector, a matrix and a list.
list_data <- list(c("Jan","Feb","Mar"), matrix(c(3,9,5,1,-2,8), nrow = 2),
                  list("green",12.3))

# Give names to the elements in the list.
names(list_data) <- c("1st Quarter", "A_Matrix", "A Inner list")

# Add element at the end of the list.
list_data[4] <- "New element"
print(list_data[4])

# Remove the last element.
list_data[4] <- NULL

# Print the 4th Element.
print(list_data[4])

# Update the 3rd Element.
list_data[3] <- "updated element"
print(list_data[3])

#Merging Lists
# Create two lists.
list1 <- list(1,2,3)
list2 <- list("Sun","Mon","Tue")

# Merge the two lists.
merged.list <- c(list1,list2)

# Print the merged list.
print(merged.list)

#Converting List to Vector
# Create lists.
list1 <- list(1:5)
print(list1)

list2 <-list(10:14)
print(list2)

# Convert the lists to vectors.
v1 <- unlist(list1)
v2 <- unlist(list2)

print(v1)
print(v2)

# Now add the vectors
result <- v1+v2
print(result)

#Matrices
#matrix(data, nrow, ncol, byrow, dimnames)
#data is the input vector which becomes the data elements of the matrix.
#nrow is the number of rows to be created.
#ncol is the number of columns to be created.
#byrow is a logical clue. If TRUE then the input vector elements are arranged by row.
#dimname is the names assigned to the rows and columns.

# Elements are arranged sequentially by row.
M <- matrix(c(3:14), nrow = 4, byrow = TRUE)
print(M)

# Elements are arranged sequentially by column.
N <- matrix(c(3:14), nrow = 4, byrow = FALSE)
print(N)

# Define the column and row names.
rownames = c("row1", "row2", "row3", "row4")
colnames = c("col1", "col2", "col3")

P <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))
print(P)

#Accessing Elements
# Access the element at 3rd column and 1st row.
print(P[1,3])

# Access the element at 2nd column and 4th row.
print(P[4,2])

# Access only the  2nd row.
print(P[2,])

# Access only the 3rd column.
print(P[,3])

#Matrix Computations
# Create two 2x3 matrices.
matrix1 <- matrix(c(3, 9, -1, 4, 2, 6), nrow = 2)
print(matrix1)

matrix2 <- matrix(c(5, 2, 0, 9, 3, 4), nrow = 2)
print(matrix2)

# Add the matrices.
result <- matrix1 + matrix2
cat("Result of addition","\n")
print(result)

# Subtract the matrices
result <- matrix1 - matrix2
cat("Result of subtraction","\n")
print(result)

# Multiply the matrices.
result <- matrix1 * matrix2
cat("Result of multiplication","\n")
print(result)

# Divide the matrices
result <- matrix1 / matrix2
cat("Result of division","\n")
print(result)

#Arrays
# Create two vectors of different lengths.
vector1 <- c(5,9,3)
vector2 <- c(10,11,12,13,14,15)

# Take these vectors as input to the array.
result <- array(c(vector1,vector2),dim = c(3,3,2))
print(result)

# Naming columns and rows
column.names <- c("COL1","COL2","COL3")
row.names <- c("ROW1","ROW2","ROW3")
matrix.names <- c("Matrix1","Matrix2")

result <- array(c(vector1,vector2),dim = c(3,3,2),dimnames = list(row.names,column.names,matrix.names))
print(result)

#Accessing Array Elements
# Print the third row of the second matrix of the array.
print(result[3,,2])

# Print the element in the 1st row and 3rd column of the 1st matrix.
print(result[1,3,1])

# Print the 2nd Matrix.
print(result[,,2])

#Manipulating Array Elements
# Take these vectors as input to the array.
array1 <- array(c(vector1,vector2),dim = c(3,3,2))

# Create two vectors of different lengths.
vector3 <- c(9,1,0)
vector4 <- c(6,0,11,3,14,1,2,6,9)
array2 <- array(c(vector1,vector2),dim = c(3,3,2))

# create matrices from these arrays.
matrix1 <- array1[,,2]
matrix2 <- array2[,,2]

# Add the matrices.
result <- matrix1+matrix2
print(result)

#Calculations Across Array Elements
# apply(x, margin, fun)
#x is an array.
#margin A numeric vector indicating the dimension over which to traverse (1 = rows) (2 = columns)
#fun is the function to be applied across the elements of the array.
# Take these vectors as input to the array.
new.array <- array(c(vector1,vector2),dim = c(3,3,2))
print(new.array)

# Use apply to calculate the sum of the rows across all the matrices.
result <- apply(new.array, c(1), sum)
print(result)

#Input
#scan()
#reads input from keyboard until it encounters a new line only takes in numbers
input <- scan()
cat(input)

#readline()
#reads input from keyboard in the form of strings
str = readline()
cat(str, "\n")

#cat()
# can print multiple arguments at once, but need a newline character to move to next line
cat("hello", "there\n")

#print()
# can only print one argument at a time and numbers elements of larger objects, but auto prints a newline
print("hello there")

#lines <- file("/Users/matth/OneDrive/Documents/Internship2021/RCode/data.txt")
#readLines(lines,n=1)

#data <- read.table(header=TRUE, text='
#subject sex size
#1 M 7
#2 F NA
#3 F 9
#4 M 11
#')
#write.table(data,"/Users/matth/OneDrive/Documents/Internship2021/RCode/table",row.names=F,col.names=F)

#CSV files
data <- read.csv("/Users/matth/OneDrive/Documents/Internship2021/RCode/input.csv")
print(data)

#Factors
# Create a vector as input.
data <- c("East","West","East","North","North","East","West","West","West","East","North")

print(data)
print(is.factor(data))

# Apply the factor function.
factor_data <- factor(data)

print(factor_data)
print(is.factor(factor_data))

#Factors in a Data Frame
# Create the vectors for data frame.
height <- c(132,151,162,139,166,147,122)
weight <- c(48,49,66,53,67,52,40)
gender <- c("male","male","female","female","male","female","male")

# Create the data frame.
input_data <- data.frame(height,weight,gender)
print(input_data)

# Test if the gender column is a factor.
print(is.factor(input_data$gender))

# Print the gender column so see the levels.
print(input_data$gender)

#Changing a factors order of levels
data <- c("East","West","East","North","North","East","West",
          "West","West","East","North")
# Create the factors
factor_data <- factor(data)
print(factor_data)

# Apply the factor function with required order of the level.
new_order_data <- factor(factor_data,levels = c("East","West","North"))
print(new_order_data)

#Generating Factor Levels
# gl(n, k, labels)
#n is a integer giving the number of levels.
#k is a integer giving the number of replications.
#labels is a vector of labels for the resulting factor levels.

v <- gl(3, 4, labels = c("Tampa", "Seattle","Boston"))
print(v)


#Data Frames
# Create the data frame.
emp.data <- data.frame(
  emp_id = c (1:5),
  emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
  salary = c(623.3,515.2,611.0,729.0,843.25),

  start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
                         "2015-03-27")),
  stringsAsFactors = FALSE
)
# Print the data frame.
print(emp.data)

# Get the structure of the data frame.
str(emp.data)

# Print the summary.
print(summary(emp.data))

# Extract Specific columns.
result <- data.frame(emp.data$emp_name,emp.data$salary)
print(result)

# Extract first two rows.
result <- emp.data[1:2,]
print(result)

# Extract 3rd and 5th row with 2nd and 4th column.
result <- emp.data[c(3,5),c(2,4)]
print(result)

#Expanding Data Frame
#Columns
# Add the "dept" coulmn.
emp.data$dept <- c("IT","Operations","IT","HR","Finance")
v <- emp.data
print(v)

#rows
# Create the second data frame
emp.newdata <- 	data.frame(
  emp_id = c (6:8),
  emp_name = c("Rasmi","Pranab","Tusar"),
  salary = c(578.0,722.5,632.8),
  start_date = as.Date(c("2013-05-21","2013-07-30","2014-06-17")),
  dept = c("IT","Operations","Fianance"),
  stringsAsFactors = FALSE
)

# Bind the two data frames.
emp.finaldata <- rbind(emp.data,emp.newdata)
print(emp.finaldata)


#Data reshaping
# Create vector objects.
city <- c("Tampa","Seattle","Hartford","Denver")
state <- c("FL","WA","CT","CO")
zipcode <- c(33602,98104,06161,80294)

# Combine above three vectors into one data frame.
addresses <- cbind(city,state,zipcode)

# Print a header.
cat("# # # # The First data frame\n")

# Print the data frame.
print(addresses)

# Create another data frame with similar columns
new.address <- data.frame(
  city = c("Lowry","Charlotte"),
  state = c("CO","FL"),
  zipcode = c("80230","33949"),
  stringsAsFactors = FALSE
)

# Print a header.
cat("# # # The Second data frame\n")

# Print the data frame.
print(new.address)

# Combine rows form both the data frames.
all.addresses <- rbind(addresses,new.address)

# Print a header.
cat("# # # The combined data frame\n")

# Print the result.
print(all.addresses)

#Merging Data frames
library(MASS)
merged.Pima <- merge(x = Pima.te, y = Pima.tr,
                     by.x = c("bp", "bmi"),
                     by.y = c("bp", "bmi")
)
print(merged.Pima)
nrow(merged.Pima)


#Melting and Casting
library(MASS)
library(reshape2)
library(reshape)
print(ships)

#Melting
molten.ships <- melt(ships, id = c("type","year"))
print(molten.ships)

#Casting
recasted.ship <- cast(molten.ships, type+year~variable,sum)
print(recasted.ship)


#pie charts
# pie(x, labels, radius, main, col, clockwise)

#x is a vector containing the numeric values used in the pie chart.
#labels is used to give description to the slices.
#radius indicates the radius of the circle of the pie chart.(value between −1 and +1).
#main indicates the title of the chart.
#col indicates the color palette.
#clockwise is a logical value indicating if the slices are drawn clockwise or anti clockwise.

# Create data for the graph.
x <- c(21, 62, 10, 53)
labels <- c("London", "New York", "Singapore", "Mumbai")

piepercent<- round(100*x/sum(x), 1)

# Give the chart file a name.
#png(file = "city.jpg")

# Plot the chart with title and rainbow color pallet.
pie(x, labels = piepercent, main = "City pie chart", col = rainbow(length(x)))
legend("topright", c("London","New York","Singapore","Mumbai"), cex = 0.8, fill = rainbow(length(x)))

# Save the file.
#dev.off()
#"C:\Users\matth\OneDrive\Documents\MyFirstPackage\city.png"

#3d Pie chart
# Get the library.
library(plotrix)

# Create data for the graph.
x <-  c(21, 62, 10,53)
lbl <-  c("London","New York","Singapore","Mumbai")

# Give the chart file a name.
#png(file = "3d_pie_chart.jpg")

# Plot the chart.
pie3D(x,labels = lbl,explode = 0.1, main = "Pie Chart of Countries ")

# Save the file.
#dev.off()

#barplots
# barplot(H,xlab,ylab,main, names.arg,col)
#H is a vector or matrix containing numeric values used in bar chart.
#xlab is the label for x axis.
#ylab is the label for y axis.
#main is the title of the bar chart.
#names.arg is a vector of names appearing under each bar.
#col is used to give colors to the bars in the graph.

# Create the data for the chart
H <- c(7,12,28,3,41)
M <- c("Mar","Apr","May","Jun","Jul")

# Give the chart file a name
#png(file = "barchart.png")

# Plot the bar chart
barplot(H,names.arg=M,xlab="Month",ylab="Revenue",col="blue", main="Revenue chart",border="red")

# Save the file
#dev.off()

#Stacked Bar chart
# Create the input vectors.
colors = c("green","orange","brown")
months <- c("Mar","Apr","May","Jun","Jul")
regions <- c("East","West","North")

# Create the matrix of the values.
Values <- matrix(c(2,9,3,11,9,4,8,7,3,12,5,2,8,10,11), nrow = 3, ncol = 5, byrow = TRUE)

# Give the chart file a name
#png(file = "barchart_stacked.png")

# Create the bar chart
barplot(Values, main = "total revenue", names.arg = months, xlab = "month", ylab = "revenue", col = colors)

# Add the legend to the chart
legend("topleft", regions, cex = 1.3, fill = colors)

# Save the file
#dev.off()

#Boxplots
# boxplot(x, data, notch, varwidth, names, main)

#x is a vector or a formula.
#data is the data frame.
#notch is a logical value. Set as TRUE to draw a notch.
#varwidth is a logical value. Set as true to draw width of the box proportionate to the sample size.
#names are the group labels which will be printed under each boxplot.
#main is used to give a title to the graph.

input <- mtcars[,c('mpg','cyl')]
print(head(input))

# Give the chart file a name.
#png(file = "boxplot_with_notch.png")

# Plot the chart.
boxplot(mpg ~ cyl, data = mtcars,
        xlab = "Number of Cylinders",
        ylab = "Miles Per Gallon",
        main = "Mileage Data",
        notch = TRUE,
        varwidth = TRUE,
        col = c("green","yellow","purple"),
        names = c("High","Medium","Low")
)
# Save the file.
#dev.off()


#Histogram
# hist(v,main,xlab,xlim,ylim,breaks,col,border)

#v is a vector containing numeric values used in histogram.
#main indicates title of the chart.
#col is used to set color of the bars.
#border is used to set border color of each bar.
#xlab is used to give description of x-axis.
#xlim is used to specify the range of values on the x-axis.
#ylim is used to specify the range of values on the y-axis.
#breaks is used to mention the width of each bar.

# Create data for the graph.
v <-  c(9,13,21,8,36,22,12,41,31,33,19)

# Give the chart file a name.
#png(file = "histogram.png")

# Create the histogram.
hist(v,xlab = "Weight",col = "green",border = "red", xlim = c(0,40), ylim = c(0,5), breaks = 5)

# Save the file.
#dev.off()


#Line Plots
# plot(v,type,col,xlab,ylab)

#v is a vector containing the numeric values.
#type takes the value "p" to draw only the points, "l" to draw only the lines and "o" to draw both points and lines.
#xlab is the label for x axis.
#ylab is the label for y axis.
#main is the Title of the chart.
#col is used to give colors to both the points and lines.

# Create the data for the chart.
v <- c(7,12,28,3,41)

# Give the chart file a name.
#png(file = "line_chart.jpg")

# Plot the bar chart.
plot(v,type = "o", col = "red", xlab = "Month", ylab = "Rain fall", main = "Rain fall chart")

# Save the file.
#dev.off()

#Multiple lines in a plot
# Create the data for the chart.
v <- c(7,12,28,3,41)
t <- c(14,7,6,19,3)

# Give the chart file a name.
#png(file = "line_chart_2_lines.jpg")

# Plot the bar chart.
plot(v,type = "o",col = "red", xlab = "Month", ylab = "Rain fall",
     main = "Rain fall chart")

lines(t, type = "o", col = "blue")

# Save the file.
#dev.off()


#Scatter Plot
# plot(x, y, main, xlab, ylab, xlim, ylim, axes)

#x is the data set whose values are the horizontal coordinates.
#y is the data set whose values are the vertical coordinates.
#main is the tile of the graph.
#xlab is the label in the horizontal axis.
#ylab is the label in the vertical axis.
#xlim is the limits of the values of x used for plotting.
#ylim is the limits of the values of y used for plotting.
#axes indicates whether both axes should be drawn on the plot.

input <- mtcars[,c('wt','mpg')]
print(head(input))

# Get the input values.
input <- mtcars[,c('wt','mpg')]

# Give the chart file a name.
#png(file = "scatterplot.png")

# Plot the chart for cars with weight between 2.5 to 5 and mileage between 15 and 30.
plot(x = input$wt,y = input$mpg,
     xlab = "Weight",
     ylab = "Milage",
     xlim = c(2.5,5),
     ylim = c(15,30),
     main = "Weight vs Milage"
)

# Save the file.
#dev.off()

#Scatter Plot Matrices
# pairs(formula, data)

#formula represents the series of variables used in pairs.
#data represents the data set from which the variables will be taken.

# Give the chart file a name.
#png(file = "scatterplot_matrices.png")

# Plot the matrices between 4 variables giving 12 plots.

# One variable with 3 others and total 4 variables.

pairs(~wt+mpg+disp+cyl,data = mtcars,
      main = "Scatterplot Matrix")

# Save the file.
#dev.off()

#Graphing functions
x <- seq(-pi,pi,0.1)
plot(x,sin(x),type="l")
y <- seq(-10,10,0.1)
plot(y,y*y + 50,type="l")

